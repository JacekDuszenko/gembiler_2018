Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> DECLARE declarations IN commands END
Rule 2     declarations -> declarations ID SEMICOLON
Rule 3     declarations -> declarations ID LBR NUM COLON NUM RBR SEMICOLON
Rule 4     declarations -> <empty>
Rule 5     commands -> commands command
Rule 6     commands -> command
Rule 7     command -> identifier ASSIGN expression SEMICOLON
Rule 8     command -> IF condition THEN commands ENDIF
Rule 9     command -> IF condition THEN commands ELSE commands ENDIF
Rule 10    command -> WHILE condition DO commands ENDWHILE
Rule 11    command -> DO commands WHILE condition ENDDO
Rule 12    iterator -> ID
Rule 13    command -> FOR iterator FROM value TO value DO commands ENDFOR
Rule 14    command -> FOR iterator FROM value DOWNTO value DO commands ENDFOR
Rule 15    command -> READ identifier SEMICOLON
Rule 16    command -> WRITE value SEMICOLON
Rule 17    expression -> value
Rule 18    expression -> value PLUS value
Rule 19    expression -> value MINUS value
Rule 20    expression -> value MULT value
Rule 21    expression -> value DIV value
Rule 22    expression -> value MOD value
Rule 23    condition -> value EQ value
Rule 24    condition -> value NEQ value
Rule 25    condition -> value LT value
Rule 26    condition -> value GT value
Rule 27    condition -> value LEQ value
Rule 28    condition -> value GEQ value
Rule 29    value -> NUM
Rule 30    value -> identifier
Rule 31    identifier -> ID
Rule 32    identifier -> ID LBR ID RBR
Rule 33    identifier -> ID LBR NUM RBR

Terminals, with rules where they appear

ASSIGN               : 7
COLON                : 3
DECLARE              : 1
DIV                  : 21
DO                   : 10 11 13 14
DOWNTO               : 14
ELSE                 : 9
END                  : 1
ENDDO                : 11
ENDFOR               : 13 14
ENDIF                : 8 9
ENDWHILE             : 10
EQ                   : 23
FOR                  : 13 14
FROM                 : 13 14
GEQ                  : 28
GT                   : 26
ID                   : 2 3 12 31 32 32 33
IF                   : 8 9
IN                   : 1
LBR                  : 3 32 33
LEQ                  : 27
LT                   : 25
MINUS                : 19
MOD                  : 22
MULT                 : 20
NEQ                  : 24
NUM                  : 3 3 29 33
PLUS                 : 18
RBR                  : 3 32 33
READ                 : 15
SEMICOLON            : 2 3 7 15 16
THEN                 : 8 9
TO                   : 13
WHILE                : 10 11
WRITE                : 16
error                : 

Nonterminals, with rules where they appear

command              : 5 6
commands             : 1 5 8 9 9 10 11 13 14
condition            : 8 9 10 11
declarations         : 1 2 3
expression           : 7
identifier           : 7 15 30
iterator             : 13 14
program              : 0
value                : 13 13 14 14 16 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . DECLARE declarations IN commands END

    DECLARE         shift and go to state 1

    program                        shift and go to state 2

state 1

    (1) program -> DECLARE . declarations IN commands END
    (2) declarations -> . declarations ID SEMICOLON
    (3) declarations -> . declarations ID LBR NUM COLON NUM RBR SEMICOLON
    (4) declarations -> .

    IN              reduce using rule 4 (declarations -> .)
    ID              reduce using rule 4 (declarations -> .)

    declarations                   shift and go to state 3

state 2

    (0) S' -> program .



state 3

    (1) program -> DECLARE declarations . IN commands END
    (2) declarations -> declarations . ID SEMICOLON
    (3) declarations -> declarations . ID LBR NUM COLON NUM RBR SEMICOLON

    IN              shift and go to state 4
    ID              shift and go to state 5


state 4

    (1) program -> DECLARE declarations IN . commands END
    (5) commands -> . commands command
    (6) commands -> . command
    (7) command -> . identifier ASSIGN expression SEMICOLON
    (8) command -> . IF condition THEN commands ENDIF
    (9) command -> . IF condition THEN commands ELSE commands ENDIF
    (10) command -> . WHILE condition DO commands ENDWHILE
    (11) command -> . DO commands WHILE condition ENDDO
    (13) command -> . FOR iterator FROM value TO value DO commands ENDFOR
    (14) command -> . FOR iterator FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . READ identifier SEMICOLON
    (16) command -> . WRITE value SEMICOLON
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    IF              shift and go to state 8
    WHILE           shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 6
    READ            shift and go to state 13
    WRITE           shift and go to state 10
    ID              shift and go to state 9

    identifier                     shift and go to state 11
    commands                       shift and go to state 7
    command                        shift and go to state 12

state 5

    (2) declarations -> declarations ID . SEMICOLON
    (3) declarations -> declarations ID . LBR NUM COLON NUM RBR SEMICOLON

    SEMICOLON       shift and go to state 17
    LBR             shift and go to state 16


state 6

    (13) command -> FOR . iterator FROM value TO value DO commands ENDFOR
    (14) command -> FOR . iterator FROM value DOWNTO value DO commands ENDFOR
    (12) iterator -> . ID

    ID              shift and go to state 19

    iterator                       shift and go to state 18

state 7

    (1) program -> DECLARE declarations IN commands . END
    (5) commands -> commands . command
    (7) command -> . identifier ASSIGN expression SEMICOLON
    (8) command -> . IF condition THEN commands ENDIF
    (9) command -> . IF condition THEN commands ELSE commands ENDIF
    (10) command -> . WHILE condition DO commands ENDWHILE
    (11) command -> . DO commands WHILE condition ENDDO
    (13) command -> . FOR iterator FROM value TO value DO commands ENDFOR
    (14) command -> . FOR iterator FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . READ identifier SEMICOLON
    (16) command -> . WRITE value SEMICOLON
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    END             shift and go to state 20
    IF              shift and go to state 8
    WHILE           shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 6
    READ            shift and go to state 13
    WRITE           shift and go to state 10
    ID              shift and go to state 9

    identifier                     shift and go to state 11
    command                        shift and go to state 21

state 8

    (8) command -> IF . condition THEN commands ENDIF
    (9) command -> IF . condition THEN commands ELSE commands ENDIF
    (23) condition -> . value EQ value
    (24) condition -> . value NEQ value
    (25) condition -> . value LT value
    (26) condition -> . value GT value
    (27) condition -> . value LEQ value
    (28) condition -> . value GEQ value
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 23
    identifier                     shift and go to state 22
    condition                      shift and go to state 24

state 9

    (31) identifier -> ID .
    (32) identifier -> ID . LBR ID RBR
    (33) identifier -> ID . LBR NUM RBR

    ASSIGN          reduce using rule 31 (identifier -> ID .)
    THEN            reduce using rule 31 (identifier -> ID .)
    DO              reduce using rule 31 (identifier -> ID .)
    ENDDO           reduce using rule 31 (identifier -> ID .)
    SEMICOLON       reduce using rule 31 (identifier -> ID .)
    EQ              reduce using rule 31 (identifier -> ID .)
    NEQ             reduce using rule 31 (identifier -> ID .)
    LT              reduce using rule 31 (identifier -> ID .)
    GT              reduce using rule 31 (identifier -> ID .)
    LEQ             reduce using rule 31 (identifier -> ID .)
    GEQ             reduce using rule 31 (identifier -> ID .)
    TO              reduce using rule 31 (identifier -> ID .)
    DOWNTO          reduce using rule 31 (identifier -> ID .)
    PLUS            reduce using rule 31 (identifier -> ID .)
    MINUS           reduce using rule 31 (identifier -> ID .)
    MULT            reduce using rule 31 (identifier -> ID .)
    DIV             reduce using rule 31 (identifier -> ID .)
    MOD             reduce using rule 31 (identifier -> ID .)
    LBR             shift and go to state 26


state 10

    (16) command -> WRITE . value SEMICOLON
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 27
    identifier                     shift and go to state 22

state 11

    (7) command -> identifier . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 28


state 12

    (6) commands -> command .

    END             reduce using rule 6 (commands -> command .)
    IF              reduce using rule 6 (commands -> command .)
    WHILE           reduce using rule 6 (commands -> command .)
    DO              reduce using rule 6 (commands -> command .)
    FOR             reduce using rule 6 (commands -> command .)
    READ            reduce using rule 6 (commands -> command .)
    WRITE           reduce using rule 6 (commands -> command .)
    ID              reduce using rule 6 (commands -> command .)
    ENDIF           reduce using rule 6 (commands -> command .)
    ELSE            reduce using rule 6 (commands -> command .)
    ENDWHILE        reduce using rule 6 (commands -> command .)
    ENDFOR          reduce using rule 6 (commands -> command .)


state 13

    (15) command -> READ . identifier SEMICOLON
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    ID              shift and go to state 9

    identifier                     shift and go to state 29

state 14

    (10) command -> WHILE . condition DO commands ENDWHILE
    (23) condition -> . value EQ value
    (24) condition -> . value NEQ value
    (25) condition -> . value LT value
    (26) condition -> . value GT value
    (27) condition -> . value LEQ value
    (28) condition -> . value GEQ value
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 23
    identifier                     shift and go to state 22
    condition                      shift and go to state 30

state 15

    (11) command -> DO . commands WHILE condition ENDDO
    (5) commands -> . commands command
    (6) commands -> . command
    (7) command -> . identifier ASSIGN expression SEMICOLON
    (8) command -> . IF condition THEN commands ENDIF
    (9) command -> . IF condition THEN commands ELSE commands ENDIF
    (10) command -> . WHILE condition DO commands ENDWHILE
    (11) command -> . DO commands WHILE condition ENDDO
    (13) command -> . FOR iterator FROM value TO value DO commands ENDFOR
    (14) command -> . FOR iterator FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . READ identifier SEMICOLON
    (16) command -> . WRITE value SEMICOLON
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    IF              shift and go to state 8
    WHILE           shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 6
    READ            shift and go to state 13
    WRITE           shift and go to state 10
    ID              shift and go to state 9

    identifier                     shift and go to state 11
    commands                       shift and go to state 31
    command                        shift and go to state 12

state 16

    (3) declarations -> declarations ID LBR . NUM COLON NUM RBR SEMICOLON

    NUM             shift and go to state 32


state 17

    (2) declarations -> declarations ID SEMICOLON .

    IN              reduce using rule 2 (declarations -> declarations ID SEMICOLON .)
    ID              reduce using rule 2 (declarations -> declarations ID SEMICOLON .)


state 18

    (13) command -> FOR iterator . FROM value TO value DO commands ENDFOR
    (14) command -> FOR iterator . FROM value DOWNTO value DO commands ENDFOR

    FROM            shift and go to state 33


state 19

    (12) iterator -> ID .

    FROM            reduce using rule 12 (iterator -> ID .)


state 20

    (1) program -> DECLARE declarations IN commands END .

    $end            reduce using rule 1 (program -> DECLARE declarations IN commands END .)


state 21

    (5) commands -> commands command .

    END             reduce using rule 5 (commands -> commands command .)
    IF              reduce using rule 5 (commands -> commands command .)
    WHILE           reduce using rule 5 (commands -> commands command .)
    DO              reduce using rule 5 (commands -> commands command .)
    FOR             reduce using rule 5 (commands -> commands command .)
    READ            reduce using rule 5 (commands -> commands command .)
    WRITE           reduce using rule 5 (commands -> commands command .)
    ID              reduce using rule 5 (commands -> commands command .)
    ENDIF           reduce using rule 5 (commands -> commands command .)
    ELSE            reduce using rule 5 (commands -> commands command .)
    ENDWHILE        reduce using rule 5 (commands -> commands command .)
    ENDFOR          reduce using rule 5 (commands -> commands command .)


state 22

    (30) value -> identifier .

    SEMICOLON       reduce using rule 30 (value -> identifier .)
    EQ              reduce using rule 30 (value -> identifier .)
    NEQ             reduce using rule 30 (value -> identifier .)
    LT              reduce using rule 30 (value -> identifier .)
    GT              reduce using rule 30 (value -> identifier .)
    LEQ             reduce using rule 30 (value -> identifier .)
    GEQ             reduce using rule 30 (value -> identifier .)
    THEN            reduce using rule 30 (value -> identifier .)
    DO              reduce using rule 30 (value -> identifier .)
    ENDDO           reduce using rule 30 (value -> identifier .)
    PLUS            reduce using rule 30 (value -> identifier .)
    MINUS           reduce using rule 30 (value -> identifier .)
    MULT            reduce using rule 30 (value -> identifier .)
    DIV             reduce using rule 30 (value -> identifier .)
    MOD             reduce using rule 30 (value -> identifier .)
    TO              reduce using rule 30 (value -> identifier .)
    DOWNTO          reduce using rule 30 (value -> identifier .)


state 23

    (23) condition -> value . EQ value
    (24) condition -> value . NEQ value
    (25) condition -> value . LT value
    (26) condition -> value . GT value
    (27) condition -> value . LEQ value
    (28) condition -> value . GEQ value

    EQ              shift and go to state 34
    NEQ             shift and go to state 36
    LT              shift and go to state 39
    GT              shift and go to state 35
    LEQ             shift and go to state 37
    GEQ             shift and go to state 38


state 24

    (8) command -> IF condition . THEN commands ENDIF
    (9) command -> IF condition . THEN commands ELSE commands ENDIF

    THEN            shift and go to state 40


state 25

    (29) value -> NUM .

    SEMICOLON       reduce using rule 29 (value -> NUM .)
    EQ              reduce using rule 29 (value -> NUM .)
    NEQ             reduce using rule 29 (value -> NUM .)
    LT              reduce using rule 29 (value -> NUM .)
    GT              reduce using rule 29 (value -> NUM .)
    LEQ             reduce using rule 29 (value -> NUM .)
    GEQ             reduce using rule 29 (value -> NUM .)
    THEN            reduce using rule 29 (value -> NUM .)
    DO              reduce using rule 29 (value -> NUM .)
    ENDDO           reduce using rule 29 (value -> NUM .)
    PLUS            reduce using rule 29 (value -> NUM .)
    MINUS           reduce using rule 29 (value -> NUM .)
    MULT            reduce using rule 29 (value -> NUM .)
    DIV             reduce using rule 29 (value -> NUM .)
    MOD             reduce using rule 29 (value -> NUM .)
    TO              reduce using rule 29 (value -> NUM .)
    DOWNTO          reduce using rule 29 (value -> NUM .)


state 26

    (32) identifier -> ID LBR . ID RBR
    (33) identifier -> ID LBR . NUM RBR

    ID              shift and go to state 41
    NUM             shift and go to state 42


state 27

    (16) command -> WRITE value . SEMICOLON

    SEMICOLON       shift and go to state 43


state 28

    (7) command -> identifier ASSIGN . expression SEMICOLON
    (17) expression -> . value
    (18) expression -> . value PLUS value
    (19) expression -> . value MINUS value
    (20) expression -> . value MULT value
    (21) expression -> . value DIV value
    (22) expression -> . value MOD value
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 44
    expression                     shift and go to state 45
    identifier                     shift and go to state 22

state 29

    (15) command -> READ identifier . SEMICOLON

    SEMICOLON       shift and go to state 46


state 30

    (10) command -> WHILE condition . DO commands ENDWHILE

    DO              shift and go to state 47


state 31

    (11) command -> DO commands . WHILE condition ENDDO
    (5) commands -> commands . command
    (7) command -> . identifier ASSIGN expression SEMICOLON
    (8) command -> . IF condition THEN commands ENDIF
    (9) command -> . IF condition THEN commands ELSE commands ENDIF
    (10) command -> . WHILE condition DO commands ENDWHILE
    (11) command -> . DO commands WHILE condition ENDDO
    (13) command -> . FOR iterator FROM value TO value DO commands ENDFOR
    (14) command -> . FOR iterator FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . READ identifier SEMICOLON
    (16) command -> . WRITE value SEMICOLON
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    WHILE           shift and go to state 48
    IF              shift and go to state 8
    DO              shift and go to state 15
    FOR             shift and go to state 6
    READ            shift and go to state 13
    WRITE           shift and go to state 10
    ID              shift and go to state 9

    identifier                     shift and go to state 11
    command                        shift and go to state 21

state 32

    (3) declarations -> declarations ID LBR NUM . COLON NUM RBR SEMICOLON

    COLON           shift and go to state 49


state 33

    (13) command -> FOR iterator FROM . value TO value DO commands ENDFOR
    (14) command -> FOR iterator FROM . value DOWNTO value DO commands ENDFOR
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 50
    identifier                     shift and go to state 22

state 34

    (23) condition -> value EQ . value
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 51
    identifier                     shift and go to state 22

state 35

    (26) condition -> value GT . value
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 52
    identifier                     shift and go to state 22

state 36

    (24) condition -> value NEQ . value
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 53
    identifier                     shift and go to state 22

state 37

    (27) condition -> value LEQ . value
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 54
    identifier                     shift and go to state 22

state 38

    (28) condition -> value GEQ . value
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 55
    identifier                     shift and go to state 22

state 39

    (25) condition -> value LT . value
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 56
    identifier                     shift and go to state 22

state 40

    (8) command -> IF condition THEN . commands ENDIF
    (9) command -> IF condition THEN . commands ELSE commands ENDIF
    (5) commands -> . commands command
    (6) commands -> . command
    (7) command -> . identifier ASSIGN expression SEMICOLON
    (8) command -> . IF condition THEN commands ENDIF
    (9) command -> . IF condition THEN commands ELSE commands ENDIF
    (10) command -> . WHILE condition DO commands ENDWHILE
    (11) command -> . DO commands WHILE condition ENDDO
    (13) command -> . FOR iterator FROM value TO value DO commands ENDFOR
    (14) command -> . FOR iterator FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . READ identifier SEMICOLON
    (16) command -> . WRITE value SEMICOLON
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    IF              shift and go to state 8
    WHILE           shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 6
    READ            shift and go to state 13
    WRITE           shift and go to state 10
    ID              shift and go to state 9

    identifier                     shift and go to state 11
    commands                       shift and go to state 57
    command                        shift and go to state 12

state 41

    (32) identifier -> ID LBR ID . RBR

    RBR             shift and go to state 58


state 42

    (33) identifier -> ID LBR NUM . RBR

    RBR             shift and go to state 59


state 43

    (16) command -> WRITE value SEMICOLON .

    WHILE           reduce using rule 16 (command -> WRITE value SEMICOLON .)
    IF              reduce using rule 16 (command -> WRITE value SEMICOLON .)
    DO              reduce using rule 16 (command -> WRITE value SEMICOLON .)
    FOR             reduce using rule 16 (command -> WRITE value SEMICOLON .)
    READ            reduce using rule 16 (command -> WRITE value SEMICOLON .)
    WRITE           reduce using rule 16 (command -> WRITE value SEMICOLON .)
    ID              reduce using rule 16 (command -> WRITE value SEMICOLON .)
    ENDFOR          reduce using rule 16 (command -> WRITE value SEMICOLON .)
    ENDIF           reduce using rule 16 (command -> WRITE value SEMICOLON .)
    ENDWHILE        reduce using rule 16 (command -> WRITE value SEMICOLON .)
    ELSE            reduce using rule 16 (command -> WRITE value SEMICOLON .)
    END             reduce using rule 16 (command -> WRITE value SEMICOLON .)


state 44

    (17) expression -> value .
    (18) expression -> value . PLUS value
    (19) expression -> value . MINUS value
    (20) expression -> value . MULT value
    (21) expression -> value . DIV value
    (22) expression -> value . MOD value

    SEMICOLON       reduce using rule 17 (expression -> value .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 60
    MULT            shift and go to state 62
    DIV             shift and go to state 64
    MOD             shift and go to state 63


state 45

    (7) command -> identifier ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 65


state 46

    (15) command -> READ identifier SEMICOLON .

    WHILE           reduce using rule 15 (command -> READ identifier SEMICOLON .)
    IF              reduce using rule 15 (command -> READ identifier SEMICOLON .)
    DO              reduce using rule 15 (command -> READ identifier SEMICOLON .)
    FOR             reduce using rule 15 (command -> READ identifier SEMICOLON .)
    READ            reduce using rule 15 (command -> READ identifier SEMICOLON .)
    WRITE           reduce using rule 15 (command -> READ identifier SEMICOLON .)
    ID              reduce using rule 15 (command -> READ identifier SEMICOLON .)
    ENDFOR          reduce using rule 15 (command -> READ identifier SEMICOLON .)
    ENDIF           reduce using rule 15 (command -> READ identifier SEMICOLON .)
    ENDWHILE        reduce using rule 15 (command -> READ identifier SEMICOLON .)
    ELSE            reduce using rule 15 (command -> READ identifier SEMICOLON .)
    END             reduce using rule 15 (command -> READ identifier SEMICOLON .)


state 47

    (10) command -> WHILE condition DO . commands ENDWHILE
    (5) commands -> . commands command
    (6) commands -> . command
    (7) command -> . identifier ASSIGN expression SEMICOLON
    (8) command -> . IF condition THEN commands ENDIF
    (9) command -> . IF condition THEN commands ELSE commands ENDIF
    (10) command -> . WHILE condition DO commands ENDWHILE
    (11) command -> . DO commands WHILE condition ENDDO
    (13) command -> . FOR iterator FROM value TO value DO commands ENDFOR
    (14) command -> . FOR iterator FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . READ identifier SEMICOLON
    (16) command -> . WRITE value SEMICOLON
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    IF              shift and go to state 8
    WHILE           shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 6
    READ            shift and go to state 13
    WRITE           shift and go to state 10
    ID              shift and go to state 9

    identifier                     shift and go to state 11
    commands                       shift and go to state 66
    command                        shift and go to state 12

state 48

    (11) command -> DO commands WHILE . condition ENDDO
    (10) command -> WHILE . condition DO commands ENDWHILE
    (23) condition -> . value EQ value
    (24) condition -> . value NEQ value
    (25) condition -> . value LT value
    (26) condition -> . value GT value
    (27) condition -> . value LEQ value
    (28) condition -> . value GEQ value
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 23
    identifier                     shift and go to state 22
    condition                      shift and go to state 67

state 49

    (3) declarations -> declarations ID LBR NUM COLON . NUM RBR SEMICOLON

    NUM             shift and go to state 68


state 50

    (13) command -> FOR iterator FROM value . TO value DO commands ENDFOR
    (14) command -> FOR iterator FROM value . DOWNTO value DO commands ENDFOR

    TO              shift and go to state 70
    DOWNTO          shift and go to state 69


state 51

    (23) condition -> value EQ value .

    ENDDO           reduce using rule 23 (condition -> value EQ value .)
    DO              reduce using rule 23 (condition -> value EQ value .)
    THEN            reduce using rule 23 (condition -> value EQ value .)


state 52

    (26) condition -> value GT value .

    ENDDO           reduce using rule 26 (condition -> value GT value .)
    DO              reduce using rule 26 (condition -> value GT value .)
    THEN            reduce using rule 26 (condition -> value GT value .)


state 53

    (24) condition -> value NEQ value .

    ENDDO           reduce using rule 24 (condition -> value NEQ value .)
    DO              reduce using rule 24 (condition -> value NEQ value .)
    THEN            reduce using rule 24 (condition -> value NEQ value .)


state 54

    (27) condition -> value LEQ value .

    ENDDO           reduce using rule 27 (condition -> value LEQ value .)
    DO              reduce using rule 27 (condition -> value LEQ value .)
    THEN            reduce using rule 27 (condition -> value LEQ value .)


state 55

    (28) condition -> value GEQ value .

    ENDDO           reduce using rule 28 (condition -> value GEQ value .)
    DO              reduce using rule 28 (condition -> value GEQ value .)
    THEN            reduce using rule 28 (condition -> value GEQ value .)


state 56

    (25) condition -> value LT value .

    ENDDO           reduce using rule 25 (condition -> value LT value .)
    DO              reduce using rule 25 (condition -> value LT value .)
    THEN            reduce using rule 25 (condition -> value LT value .)


state 57

    (8) command -> IF condition THEN commands . ENDIF
    (9) command -> IF condition THEN commands . ELSE commands ENDIF
    (5) commands -> commands . command
    (7) command -> . identifier ASSIGN expression SEMICOLON
    (8) command -> . IF condition THEN commands ENDIF
    (9) command -> . IF condition THEN commands ELSE commands ENDIF
    (10) command -> . WHILE condition DO commands ENDWHILE
    (11) command -> . DO commands WHILE condition ENDDO
    (13) command -> . FOR iterator FROM value TO value DO commands ENDFOR
    (14) command -> . FOR iterator FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . READ identifier SEMICOLON
    (16) command -> . WRITE value SEMICOLON
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    ENDIF           shift and go to state 72
    ELSE            shift and go to state 71
    IF              shift and go to state 8
    WHILE           shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 6
    READ            shift and go to state 13
    WRITE           shift and go to state 10
    ID              shift and go to state 9

    identifier                     shift and go to state 11
    command                        shift and go to state 21

state 58

    (32) identifier -> ID LBR ID RBR .

    ASSIGN          reduce using rule 32 (identifier -> ID LBR ID RBR .)
    THEN            reduce using rule 32 (identifier -> ID LBR ID RBR .)
    DO              reduce using rule 32 (identifier -> ID LBR ID RBR .)
    ENDDO           reduce using rule 32 (identifier -> ID LBR ID RBR .)
    SEMICOLON       reduce using rule 32 (identifier -> ID LBR ID RBR .)
    EQ              reduce using rule 32 (identifier -> ID LBR ID RBR .)
    NEQ             reduce using rule 32 (identifier -> ID LBR ID RBR .)
    LT              reduce using rule 32 (identifier -> ID LBR ID RBR .)
    GT              reduce using rule 32 (identifier -> ID LBR ID RBR .)
    LEQ             reduce using rule 32 (identifier -> ID LBR ID RBR .)
    GEQ             reduce using rule 32 (identifier -> ID LBR ID RBR .)
    TO              reduce using rule 32 (identifier -> ID LBR ID RBR .)
    DOWNTO          reduce using rule 32 (identifier -> ID LBR ID RBR .)
    PLUS            reduce using rule 32 (identifier -> ID LBR ID RBR .)
    MINUS           reduce using rule 32 (identifier -> ID LBR ID RBR .)
    MULT            reduce using rule 32 (identifier -> ID LBR ID RBR .)
    DIV             reduce using rule 32 (identifier -> ID LBR ID RBR .)
    MOD             reduce using rule 32 (identifier -> ID LBR ID RBR .)


state 59

    (33) identifier -> ID LBR NUM RBR .

    ASSIGN          reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    THEN            reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    DO              reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    ENDDO           reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    SEMICOLON       reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    EQ              reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    NEQ             reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    LT              reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    GT              reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    LEQ             reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    GEQ             reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    TO              reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    DOWNTO          reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    PLUS            reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    MINUS           reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    MULT            reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    DIV             reduce using rule 33 (identifier -> ID LBR NUM RBR .)
    MOD             reduce using rule 33 (identifier -> ID LBR NUM RBR .)


state 60

    (19) expression -> value MINUS . value
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 73
    identifier                     shift and go to state 22

state 61

    (18) expression -> value PLUS . value
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 74
    identifier                     shift and go to state 22

state 62

    (20) expression -> value MULT . value
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 75
    identifier                     shift and go to state 22

state 63

    (22) expression -> value MOD . value
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 76
    identifier                     shift and go to state 22

state 64

    (21) expression -> value DIV . value
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 77
    identifier                     shift and go to state 22

state 65

    (7) command -> identifier ASSIGN expression SEMICOLON .

    WHILE           reduce using rule 7 (command -> identifier ASSIGN expression SEMICOLON .)
    IF              reduce using rule 7 (command -> identifier ASSIGN expression SEMICOLON .)
    DO              reduce using rule 7 (command -> identifier ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 7 (command -> identifier ASSIGN expression SEMICOLON .)
    READ            reduce using rule 7 (command -> identifier ASSIGN expression SEMICOLON .)
    WRITE           reduce using rule 7 (command -> identifier ASSIGN expression SEMICOLON .)
    ID              reduce using rule 7 (command -> identifier ASSIGN expression SEMICOLON .)
    ENDFOR          reduce using rule 7 (command -> identifier ASSIGN expression SEMICOLON .)
    ENDIF           reduce using rule 7 (command -> identifier ASSIGN expression SEMICOLON .)
    ENDWHILE        reduce using rule 7 (command -> identifier ASSIGN expression SEMICOLON .)
    ELSE            reduce using rule 7 (command -> identifier ASSIGN expression SEMICOLON .)
    END             reduce using rule 7 (command -> identifier ASSIGN expression SEMICOLON .)


state 66

    (10) command -> WHILE condition DO commands . ENDWHILE
    (5) commands -> commands . command
    (7) command -> . identifier ASSIGN expression SEMICOLON
    (8) command -> . IF condition THEN commands ENDIF
    (9) command -> . IF condition THEN commands ELSE commands ENDIF
    (10) command -> . WHILE condition DO commands ENDWHILE
    (11) command -> . DO commands WHILE condition ENDDO
    (13) command -> . FOR iterator FROM value TO value DO commands ENDFOR
    (14) command -> . FOR iterator FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . READ identifier SEMICOLON
    (16) command -> . WRITE value SEMICOLON
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    ENDWHILE        shift and go to state 78
    IF              shift and go to state 8
    WHILE           shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 6
    READ            shift and go to state 13
    WRITE           shift and go to state 10
    ID              shift and go to state 9

    identifier                     shift and go to state 11
    command                        shift and go to state 21

state 67

    (11) command -> DO commands WHILE condition . ENDDO
    (10) command -> WHILE condition . DO commands ENDWHILE

    ENDDO           shift and go to state 79
    DO              shift and go to state 47


state 68

    (3) declarations -> declarations ID LBR NUM COLON NUM . RBR SEMICOLON

    RBR             shift and go to state 80


state 69

    (14) command -> FOR iterator FROM value DOWNTO . value DO commands ENDFOR
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 81
    identifier                     shift and go to state 22

state 70

    (13) command -> FOR iterator FROM value TO . value DO commands ENDFOR
    (29) value -> . NUM
    (30) value -> . identifier
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    NUM             shift and go to state 25
    ID              shift and go to state 9

    value                          shift and go to state 82
    identifier                     shift and go to state 22

state 71

    (9) command -> IF condition THEN commands ELSE . commands ENDIF
    (5) commands -> . commands command
    (6) commands -> . command
    (7) command -> . identifier ASSIGN expression SEMICOLON
    (8) command -> . IF condition THEN commands ENDIF
    (9) command -> . IF condition THEN commands ELSE commands ENDIF
    (10) command -> . WHILE condition DO commands ENDWHILE
    (11) command -> . DO commands WHILE condition ENDDO
    (13) command -> . FOR iterator FROM value TO value DO commands ENDFOR
    (14) command -> . FOR iterator FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . READ identifier SEMICOLON
    (16) command -> . WRITE value SEMICOLON
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    IF              shift and go to state 8
    WHILE           shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 6
    READ            shift and go to state 13
    WRITE           shift and go to state 10
    ID              shift and go to state 9

    identifier                     shift and go to state 11
    commands                       shift and go to state 83
    command                        shift and go to state 12

state 72

    (8) command -> IF condition THEN commands ENDIF .

    WHILE           reduce using rule 8 (command -> IF condition THEN commands ENDIF .)
    IF              reduce using rule 8 (command -> IF condition THEN commands ENDIF .)
    DO              reduce using rule 8 (command -> IF condition THEN commands ENDIF .)
    FOR             reduce using rule 8 (command -> IF condition THEN commands ENDIF .)
    READ            reduce using rule 8 (command -> IF condition THEN commands ENDIF .)
    WRITE           reduce using rule 8 (command -> IF condition THEN commands ENDIF .)
    ID              reduce using rule 8 (command -> IF condition THEN commands ENDIF .)
    ENDFOR          reduce using rule 8 (command -> IF condition THEN commands ENDIF .)
    ENDIF           reduce using rule 8 (command -> IF condition THEN commands ENDIF .)
    ENDWHILE        reduce using rule 8 (command -> IF condition THEN commands ENDIF .)
    ELSE            reduce using rule 8 (command -> IF condition THEN commands ENDIF .)
    END             reduce using rule 8 (command -> IF condition THEN commands ENDIF .)


state 73

    (19) expression -> value MINUS value .

    SEMICOLON       reduce using rule 19 (expression -> value MINUS value .)


state 74

    (18) expression -> value PLUS value .

    SEMICOLON       reduce using rule 18 (expression -> value PLUS value .)


state 75

    (20) expression -> value MULT value .

    SEMICOLON       reduce using rule 20 (expression -> value MULT value .)


state 76

    (22) expression -> value MOD value .

    SEMICOLON       reduce using rule 22 (expression -> value MOD value .)


state 77

    (21) expression -> value DIV value .

    SEMICOLON       reduce using rule 21 (expression -> value DIV value .)


state 78

    (10) command -> WHILE condition DO commands ENDWHILE .

    WHILE           reduce using rule 10 (command -> WHILE condition DO commands ENDWHILE .)
    IF              reduce using rule 10 (command -> WHILE condition DO commands ENDWHILE .)
    DO              reduce using rule 10 (command -> WHILE condition DO commands ENDWHILE .)
    FOR             reduce using rule 10 (command -> WHILE condition DO commands ENDWHILE .)
    READ            reduce using rule 10 (command -> WHILE condition DO commands ENDWHILE .)
    WRITE           reduce using rule 10 (command -> WHILE condition DO commands ENDWHILE .)
    ID              reduce using rule 10 (command -> WHILE condition DO commands ENDWHILE .)
    ENDFOR          reduce using rule 10 (command -> WHILE condition DO commands ENDWHILE .)
    ENDIF           reduce using rule 10 (command -> WHILE condition DO commands ENDWHILE .)
    ENDWHILE        reduce using rule 10 (command -> WHILE condition DO commands ENDWHILE .)
    ELSE            reduce using rule 10 (command -> WHILE condition DO commands ENDWHILE .)
    END             reduce using rule 10 (command -> WHILE condition DO commands ENDWHILE .)


state 79

    (11) command -> DO commands WHILE condition ENDDO .

    WHILE           reduce using rule 11 (command -> DO commands WHILE condition ENDDO .)
    IF              reduce using rule 11 (command -> DO commands WHILE condition ENDDO .)
    DO              reduce using rule 11 (command -> DO commands WHILE condition ENDDO .)
    FOR             reduce using rule 11 (command -> DO commands WHILE condition ENDDO .)
    READ            reduce using rule 11 (command -> DO commands WHILE condition ENDDO .)
    WRITE           reduce using rule 11 (command -> DO commands WHILE condition ENDDO .)
    ID              reduce using rule 11 (command -> DO commands WHILE condition ENDDO .)
    ENDFOR          reduce using rule 11 (command -> DO commands WHILE condition ENDDO .)
    ENDIF           reduce using rule 11 (command -> DO commands WHILE condition ENDDO .)
    ENDWHILE        reduce using rule 11 (command -> DO commands WHILE condition ENDDO .)
    ELSE            reduce using rule 11 (command -> DO commands WHILE condition ENDDO .)
    END             reduce using rule 11 (command -> DO commands WHILE condition ENDDO .)


state 80

    (3) declarations -> declarations ID LBR NUM COLON NUM RBR . SEMICOLON

    SEMICOLON       shift and go to state 84


state 81

    (14) command -> FOR iterator FROM value DOWNTO value . DO commands ENDFOR

    DO              shift and go to state 85


state 82

    (13) command -> FOR iterator FROM value TO value . DO commands ENDFOR

    DO              shift and go to state 86


state 83

    (9) command -> IF condition THEN commands ELSE commands . ENDIF
    (5) commands -> commands . command
    (7) command -> . identifier ASSIGN expression SEMICOLON
    (8) command -> . IF condition THEN commands ENDIF
    (9) command -> . IF condition THEN commands ELSE commands ENDIF
    (10) command -> . WHILE condition DO commands ENDWHILE
    (11) command -> . DO commands WHILE condition ENDDO
    (13) command -> . FOR iterator FROM value TO value DO commands ENDFOR
    (14) command -> . FOR iterator FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . READ identifier SEMICOLON
    (16) command -> . WRITE value SEMICOLON
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    ENDIF           shift and go to state 87
    IF              shift and go to state 8
    WHILE           shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 6
    READ            shift and go to state 13
    WRITE           shift and go to state 10
    ID              shift and go to state 9

    identifier                     shift and go to state 11
    command                        shift and go to state 21

state 84

    (3) declarations -> declarations ID LBR NUM COLON NUM RBR SEMICOLON .

    IN              reduce using rule 3 (declarations -> declarations ID LBR NUM COLON NUM RBR SEMICOLON .)
    ID              reduce using rule 3 (declarations -> declarations ID LBR NUM COLON NUM RBR SEMICOLON .)


state 85

    (14) command -> FOR iterator FROM value DOWNTO value DO . commands ENDFOR
    (5) commands -> . commands command
    (6) commands -> . command
    (7) command -> . identifier ASSIGN expression SEMICOLON
    (8) command -> . IF condition THEN commands ENDIF
    (9) command -> . IF condition THEN commands ELSE commands ENDIF
    (10) command -> . WHILE condition DO commands ENDWHILE
    (11) command -> . DO commands WHILE condition ENDDO
    (13) command -> . FOR iterator FROM value TO value DO commands ENDFOR
    (14) command -> . FOR iterator FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . READ identifier SEMICOLON
    (16) command -> . WRITE value SEMICOLON
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    IF              shift and go to state 8
    WHILE           shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 6
    READ            shift and go to state 13
    WRITE           shift and go to state 10
    ID              shift and go to state 9

    identifier                     shift and go to state 11
    commands                       shift and go to state 88
    command                        shift and go to state 12

state 86

    (13) command -> FOR iterator FROM value TO value DO . commands ENDFOR
    (5) commands -> . commands command
    (6) commands -> . command
    (7) command -> . identifier ASSIGN expression SEMICOLON
    (8) command -> . IF condition THEN commands ENDIF
    (9) command -> . IF condition THEN commands ELSE commands ENDIF
    (10) command -> . WHILE condition DO commands ENDWHILE
    (11) command -> . DO commands WHILE condition ENDDO
    (13) command -> . FOR iterator FROM value TO value DO commands ENDFOR
    (14) command -> . FOR iterator FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . READ identifier SEMICOLON
    (16) command -> . WRITE value SEMICOLON
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    IF              shift and go to state 8
    WHILE           shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 6
    READ            shift and go to state 13
    WRITE           shift and go to state 10
    ID              shift and go to state 9

    identifier                     shift and go to state 11
    commands                       shift and go to state 89
    command                        shift and go to state 12

state 87

    (9) command -> IF condition THEN commands ELSE commands ENDIF .

    WHILE           reduce using rule 9 (command -> IF condition THEN commands ELSE commands ENDIF .)
    IF              reduce using rule 9 (command -> IF condition THEN commands ELSE commands ENDIF .)
    DO              reduce using rule 9 (command -> IF condition THEN commands ELSE commands ENDIF .)
    FOR             reduce using rule 9 (command -> IF condition THEN commands ELSE commands ENDIF .)
    READ            reduce using rule 9 (command -> IF condition THEN commands ELSE commands ENDIF .)
    WRITE           reduce using rule 9 (command -> IF condition THEN commands ELSE commands ENDIF .)
    ID              reduce using rule 9 (command -> IF condition THEN commands ELSE commands ENDIF .)
    ENDFOR          reduce using rule 9 (command -> IF condition THEN commands ELSE commands ENDIF .)
    ENDIF           reduce using rule 9 (command -> IF condition THEN commands ELSE commands ENDIF .)
    ENDWHILE        reduce using rule 9 (command -> IF condition THEN commands ELSE commands ENDIF .)
    ELSE            reduce using rule 9 (command -> IF condition THEN commands ELSE commands ENDIF .)
    END             reduce using rule 9 (command -> IF condition THEN commands ELSE commands ENDIF .)


state 88

    (14) command -> FOR iterator FROM value DOWNTO value DO commands . ENDFOR
    (5) commands -> commands . command
    (7) command -> . identifier ASSIGN expression SEMICOLON
    (8) command -> . IF condition THEN commands ENDIF
    (9) command -> . IF condition THEN commands ELSE commands ENDIF
    (10) command -> . WHILE condition DO commands ENDWHILE
    (11) command -> . DO commands WHILE condition ENDDO
    (13) command -> . FOR iterator FROM value TO value DO commands ENDFOR
    (14) command -> . FOR iterator FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . READ identifier SEMICOLON
    (16) command -> . WRITE value SEMICOLON
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    ENDFOR          shift and go to state 90
    IF              shift and go to state 8
    WHILE           shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 6
    READ            shift and go to state 13
    WRITE           shift and go to state 10
    ID              shift and go to state 9

    identifier                     shift and go to state 11
    command                        shift and go to state 21

state 89

    (13) command -> FOR iterator FROM value TO value DO commands . ENDFOR
    (5) commands -> commands . command
    (7) command -> . identifier ASSIGN expression SEMICOLON
    (8) command -> . IF condition THEN commands ENDIF
    (9) command -> . IF condition THEN commands ELSE commands ENDIF
    (10) command -> . WHILE condition DO commands ENDWHILE
    (11) command -> . DO commands WHILE condition ENDDO
    (13) command -> . FOR iterator FROM value TO value DO commands ENDFOR
    (14) command -> . FOR iterator FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . READ identifier SEMICOLON
    (16) command -> . WRITE value SEMICOLON
    (31) identifier -> . ID
    (32) identifier -> . ID LBR ID RBR
    (33) identifier -> . ID LBR NUM RBR

    ENDFOR          shift and go to state 91
    IF              shift and go to state 8
    WHILE           shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 6
    READ            shift and go to state 13
    WRITE           shift and go to state 10
    ID              shift and go to state 9

    identifier                     shift and go to state 11
    command                        shift and go to state 21

state 90

    (14) command -> FOR iterator FROM value DOWNTO value DO commands ENDFOR .

    WHILE           reduce using rule 14 (command -> FOR iterator FROM value DOWNTO value DO commands ENDFOR .)
    IF              reduce using rule 14 (command -> FOR iterator FROM value DOWNTO value DO commands ENDFOR .)
    DO              reduce using rule 14 (command -> FOR iterator FROM value DOWNTO value DO commands ENDFOR .)
    FOR             reduce using rule 14 (command -> FOR iterator FROM value DOWNTO value DO commands ENDFOR .)
    READ            reduce using rule 14 (command -> FOR iterator FROM value DOWNTO value DO commands ENDFOR .)
    WRITE           reduce using rule 14 (command -> FOR iterator FROM value DOWNTO value DO commands ENDFOR .)
    ID              reduce using rule 14 (command -> FOR iterator FROM value DOWNTO value DO commands ENDFOR .)
    ENDFOR          reduce using rule 14 (command -> FOR iterator FROM value DOWNTO value DO commands ENDFOR .)
    ENDIF           reduce using rule 14 (command -> FOR iterator FROM value DOWNTO value DO commands ENDFOR .)
    ENDWHILE        reduce using rule 14 (command -> FOR iterator FROM value DOWNTO value DO commands ENDFOR .)
    ELSE            reduce using rule 14 (command -> FOR iterator FROM value DOWNTO value DO commands ENDFOR .)
    END             reduce using rule 14 (command -> FOR iterator FROM value DOWNTO value DO commands ENDFOR .)


state 91

    (13) command -> FOR iterator FROM value TO value DO commands ENDFOR .

    WHILE           reduce using rule 13 (command -> FOR iterator FROM value TO value DO commands ENDFOR .)
    IF              reduce using rule 13 (command -> FOR iterator FROM value TO value DO commands ENDFOR .)
    DO              reduce using rule 13 (command -> FOR iterator FROM value TO value DO commands ENDFOR .)
    FOR             reduce using rule 13 (command -> FOR iterator FROM value TO value DO commands ENDFOR .)
    READ            reduce using rule 13 (command -> FOR iterator FROM value TO value DO commands ENDFOR .)
    WRITE           reduce using rule 13 (command -> FOR iterator FROM value TO value DO commands ENDFOR .)
    ID              reduce using rule 13 (command -> FOR iterator FROM value TO value DO commands ENDFOR .)
    ENDFOR          reduce using rule 13 (command -> FOR iterator FROM value TO value DO commands ENDFOR .)
    ENDIF           reduce using rule 13 (command -> FOR iterator FROM value TO value DO commands ENDFOR .)
    ENDWHILE        reduce using rule 13 (command -> FOR iterator FROM value TO value DO commands ENDFOR .)
    ELSE            reduce using rule 13 (command -> FOR iterator FROM value TO value DO commands ENDFOR .)
    END             reduce using rule 13 (command -> FOR iterator FROM value TO value DO commands ENDFOR .)

